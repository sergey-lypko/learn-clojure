; • referential transparency (RT) - один и тот же результат при
;   одних и тех же аргументах
; • отсутствие side effects

; функции, обладающие вышеперечисленными ^ характеристиками,
; являются чистыми и обладают рядом преимуществ:
; - они полностью изолированы
; - неспособны влиять на другие части системы и на друг друга
; - последовательны: результаты предсказуемы
; - надежность и стабильность

; RT функции позволяют избегать зависимости от внешних условий
; и выражаются в предсказуемом и понятном поведении
; это особенно важно, когда функция используется в различных местах
; а так же в цепочках вложенностей

; можно привести пример с гравитацией, которая так же RT:
; пусть сила притяжение будет являться чистой функцией
; следовательно любой предмет, к которому будет применена
; сила тяжести (столкнуть со стола) - упадет (предсказуемое поведение)
; как и к множеству объектов (к каждому из которых будет применена,
; сила тяжести, что к слову так же демонстирует обработку коллекций)

; функции, полагающиеся на иммутабельное значение -> RT and pure
(defn say-hi [name] (str "Hello, " name)) ;
(println (say-hi "Nikodim")) ; Hello, Nikodim
(println (say-hi "Nikodim")) ; Hello, Nikodim

; функции, полагающиеся на рандом или чтение из файлов -> not RT and not pure
(defn generate-number [] rand) ; ~ 0.48
(defn generate-number [] rand) ; ~ 0.41
(defn parse [filename] (slurp filename)) ; depends on file
