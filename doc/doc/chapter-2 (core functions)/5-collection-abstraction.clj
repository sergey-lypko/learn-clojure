; в то время как seq-abstraction описывает манипуляцию элментами в пос-ти
; coll-abstraction - это вся пос-ть целиком и так же абстратные операции,
; которые можно над этой последовательностью производить

; -- -- into -- --
; into - это соединение структур данных
; часто при работе с пос-ти, такие методы как map
; возвращаяют именно пос-ть (список) по типу (1 2 3)
; для того, чтобы преобразовать полученное значение ^ к исходной СД
; используется into
(into [] (map inc [1 2 3])) ; [2 3 4], а не (2 3 4)
(into '() (map #(str "Hey " %) ["A" "B" "C"])) ; ("Hey C" "Hey B" "Hey A")
(into #{} (map inc [1 2 2 3 3 4])) ; #{4 3 2 5}

; с уже существующими элементами в пос-ти
(into [1 2 3] '(4 5 6)) ; [1 2 3 4 5 6]


; -- -- conj -- --
; в то время, как аргументами into являются коллекции,
; conj работает по принципу collection <- rest args
(conj [1 2 3] 4 5 6) ; [1 2 3 4 5 6]
(conj [1 2 3] [3 4]) ; [1 2 3 [3 4]]

; conj через target
(defn my-conj
  [target & additions]
  (into target additions))

(my-conj [0] 1 2 3)
